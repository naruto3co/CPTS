DNS (Domain Name System) là hệ thống giúp chuyển đổi tên miền dễ nhớ (như www.example.com) thành địa chỉ IP số (như 192.0.2.1) mà máy tính sử dụng để giao tiếp.
Nó hoạt động tương tự như GPS của Internet, giúp người dùng đến đúng “địa chỉ” trên mạng mà không cần nhớ các dãy số phức tạp.
Lợi ích chính: giúp việc truy cập website trở nên đơn giản, tiện lợi và hiệu quả — người dùng chỉ cần nhập tên miền thay vì địa chỉ IP.
Nếu không có DNS, việc truy cập Internet sẽ rất khó khăn, giống như lái xe mà không có bản đồ hay GPS.

How DNS Works
Imagine you want to visit a website like www.example.com. You type this friendly domain name into your browser, but your computer doesn't understand words – it speaks the language of numbers, specifically IP addresses. So, how does your computer find the website's IP address? Enter DNS, the internet's trusty translator.
              
              ┌────────────────────────────┐
              │        Your Computer       │
              └────────────────────────────┘
                        │
                        ▼
              ┌──────────────┐
              │ Checks Cache │
              └───────┬──────┘
                      │
                      ▼
                 ┌─────────────┐
                 │  IP Found?  │
                 └─────┬───────┘
                   Yes │  No
                       │
                       │
                       ▼
               ┌─────────────────────────────┐
               │ Sends DNS Query to Resolver │
               └─────────────┬───────────────┘
                             │
                             ▼
                    ┌──────────────────────────────┐
                    │         DNS Resolver         │
                    └──────────────────────────────┘
                             │
                             ▼
                      ┌──────────────┐
                      │ Checks Cache │
                      └───────┬──────┘
                              │
                              ▼
                         ┌──────────────┐
                         │ IP Found?    │
                         └──────┬───────┘
                           Yes  │  No
                                │
                                ▼
                      ┌────────────────────┐
                      │ Recursive Lookup   │
                      └─────────┬──────────┘
                                │
                                ▼
                    ┌────────────────────────┐
                    │     Root Name Server    │
                    └─────────┬──────────────┘
                              │
                              ▼
                    ┌────────────────────────┐
                    │     TLD Name Server     │
                    └─────────┬──────────────┘
                              │
                              ▼
              ┌────────────────────────────────────────┐
              │      Authoritative Name Server         │
              └───────────────┬────────────────────────┘
                              │
                              ▼
                   ┌────────────────────────┐
                   │ Returns IP to Computer │
                   └─────────────┬──────────┘
                                 │
                                 ▼
                   ┌────────────────────────┐
                   │ Connects to Website     │
                   └────────────────────────┘


Your Computer Asks for Directions (DNS Query): When you enter the domain name, your computer first checks its memory (cache) to see if it remembers the IP address from a previous visit. If not, it reaches out to a DNS resolver, usually provided by your internet service provider (ISP).
The DNS Resolver Checks its Map (Recursive Lookup): The resolver also has a cache, and if it doesn't find the IP address there, it starts a journey through the DNS hierarchy. It begins by asking a root name server, which is like the librarian of the internet.
Root Name Server Points the Way: The root server doesn't know the exact address but knows who does – the Top-Level Domain (TLD) name server responsible for the domain's ending (e.g., .com, .org). It points the resolver in the right direction.
TLD Name Server Narrows It Down: The TLD name server is like a regional map. It knows which authoritative name server is responsible for the specific domain you're looking for (e.g., example.com) and sends the resolver there.
Authoritative Name Server Delivers the Address: The authoritative name server is the final stop. It's like the street address of the website you want. It holds the correct IP address and sends it back to the resolver.
The DNS Resolver Returns the Information: The resolver receives the IP address and gives it to your computer. It also remembers it for a while (caches it), in case you want to revisit the website soon.
Your Computer Connects: Now that your computer knows the IP address, it can connect directly to the web server hosting the website, and you can start browsing.



The Hosts File
  The hosts file is a simple text file used to map hostnames to IP addresses, providing a manual method of domain name resolution that bypasses the DNS process. While DNS automates the translation of domain names to IP addresses, the hosts file allows for direct, local overrides. This can be particularly useful for development, troubleshooting, or blocking websites.
  The hosts file is located in C:\Windows\System32\drivers\etc\hosts on Windows and in /etc/hosts on Linux and MacOS. Each line in the file follows the format:
    ( tệp host nó ghi đè domain ứng với IP trước luôn k cần hỏi DNS ) 

      127.0.0.1       localhost
      192.168.1.10    devserver.local

Key DNS Concepts
  In the Domain Name System (DNS), a zone is a distinct part of the domain namespace that a specific entity or administrator manages. Think of it as a virtual container for a set of domain names. For example, example.com and all its subdomains (like mail.example.com or blog.example.com) would typically belong to the same DNS zone.
  The zone file, a text file residing on a DNS server, defines the resource records (discussed below) within this zone, providing crucial information for translating domain names into IP addresses.
  To illustrate, here's a simplified example of what a zone file, for example.com might look like:

      $TTL 3600 ; Default Time-To-Live (1 hour)
      @       IN SOA   ns1.example.com. admin.example.com. (
                      2024060401 ; Serial number (YYYYMMDDNN)
                      3600       ; Refresh interval
                      900        ; Retry interval
                      604800     ; Expire time
                      86400 )    ; Minimum TTL
      
      @       IN NS    ns1.example.com.
      @       IN NS    ns2.example.com.
      @       IN MX 10 mail.example.com.
      www     IN A     192.0.2.1
      mail    IN A     198.51.100.1
      ftp     IN CNAME www.example.com.

This file defines the authoritative name servers (NS records), mail server (MX record), and IP addresses (A records) for various hosts within the example.com domain.

DNS servers store various resource records, each serving a specific purpose in the domain name resolution process. Let's explore some of the most common DNS concepts:

  | **DNS Concept**               | **Description**                                                       | **Example**                                               |
  | ----------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------- |
  | **Domain Name**               | Tên miền – nhãn dễ đọc đại diện cho website hoặc tài nguyên Internet. | `www.example.com`                                         |
  | **IP Address**                | Địa chỉ số duy nhất được gán cho mỗi thiết bị kết nối Internet.       | `192.0.2.1`                                               |
  | **DNS Resolver**              | Máy chủ dịch tên miền sang địa chỉ IP.                                | DNS của ISP hoặc DNS công cộng như Google DNS (`8.8.8.8`) |
  | **Root Name Server**          | Máy chủ gốc ở tầng cao nhất của hệ thống DNS.                         | Có 13 máy chủ gốc (A–M): `a.root-servers.net`             |
  | **TLD Name Server**           | Máy chủ quản lý các tên miền cấp cao (TLD) như `.com`, `.org`.        | Verisign quản lý `.com`, PIR quản lý `.org`               |
  | **Authoritative Name Server** | Máy chủ chứa bản ghi IP thực sự của tên miền.                         | Thường do nhà cung cấp hosting hoặc registrar quản lý.    |
  | **DNS Record Types**          | Các loại bản ghi DNS lưu thông tin khác nhau.                         | `A`, `AAAA`, `CNAME`, `MX`, `NS`, `TXT`, ...              |

| **Record Type** | **Full Name**             | **Description**                                                                                      | **Zone File Example**                                                                        |
| --------------- | ------------------------- | ---------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |
| **A**           | Address Record            | Ánh xạ tên miền (hostname) sang địa chỉ **IPv4**.                                                    | `www.example.com. IN A 192.0.2.1`                                                            |
| **AAAA**        | IPv6 Address Record       | Ánh xạ tên miền sang địa chỉ **IPv6**.                                                               | `www.example.com. IN AAAA 2001:db8:85a3::8a2e:370:7334`                                      |
| **CNAME**       | Canonical Name Record     | Tạo **bí danh (alias)** cho hostname, trỏ đến hostname khác.                                         | `blog.example.com. IN CNAME webserver.example.net.`                                          |
| **MX**          | Mail Exchange Record      | Xác định **máy chủ mail** chịu trách nhiệm nhận email cho tên miền.                                  | `example.com. IN MX 10 mail.example.com.`                                                    |
| **NS**          | Name Server Record        | Ủy quyền quản lý vùng DNS cho **máy chủ tên miền (name server)** cụ thể.                             | `example.com. IN NS ns1.example.com.`                                                        |
| **TXT**         | Text Record               | Lưu **chuỗi văn bản tùy ý**, thường dùng cho xác minh tên miền hoặc chính sách bảo mật (SPF, DKIM…). | `example.com. IN TXT "v=spf1 mx -all"`                                                       |
| **SOA**         | Start of Authority Record | Chứa thông tin quản trị vùng DNS (máy chủ chính, email quản trị, số serial, TTL…).                   | `example.com. IN SOA ns1.example.com. admin.example.com. 2024060301 10800 3600 604800 86400` |
| **SRV**         | Service Record            | Xác định **máy chủ và cổng dịch vụ** cho ứng dụng cụ thể (như SIP, LDAP…).                           | `_sip._udp.example.com. IN SRV 10 5 5060 sipserver.example.com.`                             |
| **PTR**         | Pointer Record            | Dùng cho **tra cứu ngược (reverse lookup)**: ánh xạ **địa chỉ IP → tên miền**.                       | `1.2.0.192.in-addr.arpa. IN PTR www.example.com.`                                            |

The "IN" in the examples stands for "Internet." It's a class field in DNS records that specifies the protocol family. In most cases, you'll see "IN" used, as it denotes the Internet protocol suite (IP) used for most domain names. Other class values exist (e.g., CH for Chaosnet, HS for Hesiod) but are rarely used in modern DNS configurations.
In essence, "IN" is simply a convention that indicates that the record applies to the standard internet protocols we use today. While it might seem like an extra detail, understanding its meaning provides a deeper understanding of DNS record structure.

Why DNS Matters for Web Recon
DNS is not merely a technical protocol for translating domain names; it's a critical component of a target's infrastructure that can be leveraged to uncover vulnerabilities and gain access during a penetration test:
Uncovering Assets: DNS records can reveal a wealth of information, including subdomains, mail servers, and name server records. For instance, a CNAME record pointing to an outdated server (dev.example.com CNAME oldserver.example.net) could lead to a vulnerable system.
Mapping the Network Infrastructure: You can create a comprehensive map of the target's network infrastructure by analysing DNS data. For example, identifying the name servers (NS records) for a domain can reveal the hosting provider used, while an A record for loadbalancer.example.com can pinpoint a load balancer. This helps you understand how different systems are connected, identify traffic flow, and pinpoint potential choke points or weaknesses that could be exploited during a penetration test.
Monitoring for Changes: Continuously monitoring DNS records can reveal changes in the target's infrastructure over time. For example, the sudden appearance of a new subdomain (vpn.example.com) might indicate a new entry point into the network, while a TXT record containing a value like _1password=... strongly suggests the organization is using 1Password, which could be leveraged for social engineering attacks or targeted phishing campaigns.




====================================================================== Digging DNS ======================================================================
====================================================================== Digging DNS ======================================================================
====================================================================== Digging DNS ======================================================================

Digging DNS
Having established a solid understanding of DNS fundamentals and its various record types, let's now transition to the practical. This section will explore the tools and techniques for leveraging DNS for web reconnaissance.

DNS Tools
DNS reconnaissance involves utilizing specialized tools designed to query DNS servers and extract valuable information. Here are some of the most popular and versatile tools in the arsenal of web recon professionals:

| **Tool**                       | **Key Features**                                                                                     | **Use Cases**                                                                                                               |
| ------------------------------ | ---------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- |
| **dig**                        | Công cụ tra cứu DNS mạnh mẽ, hỗ trợ nhiều loại truy vấn (A, MX, NS, TXT, v.v.) và hiển thị chi tiết. | Thực hiện truy vấn DNS thủ công, kiểm tra zone transfer (nếu được phép), khắc phục sự cố DNS, phân tích chuyên sâu bản ghi. |
| **nslookup**                   | Công cụ tra cứu DNS đơn giản, chủ yếu hỗ trợ bản ghi A, AAAA và MX.                                  | Kiểm tra nhanh tên miền, tra cứu cơ bản về phân giải tên miền hoặc máy chủ mail.                                            |
| **host**                       | Công cụ tra cứu DNS gọn nhẹ với kết quả ngắn gọn.                                                    | Kiểm tra nhanh bản ghi A, AAAA, MX.                                                                                         |
| **dnsenum**                    | Tự động liệt kê DNS, hỗ trợ tấn công từ điển, brute force, và zone transfer (nếu được phép).         | Phát hiện subdomain và thu thập thông tin DNS tự động.                                                                      |
| **fierce**                     | Công cụ trinh sát DNS và liệt kê subdomain, hỗ trợ tìm kiếm đệ quy và phát hiện wildcard.            | Dễ sử dụng cho reconnaissance DNS, xác định subdomain và mục tiêu tiềm năng.                                                |
| **dnsrecon**                   | Kết hợp nhiều kỹ thuật trinh sát DNS, hỗ trợ nhiều định dạng xuất kết quả.                           | Liệt kê DNS toàn diện, phát hiện subdomain, thu thập bản ghi DNS để phân tích sâu.                                          |
| **theHarvester**               | Công cụ OSINT thu thập thông tin từ nhiều nguồn, bao gồm bản ghi DNS và email.                       | Thu thập email, thông tin nhân viên và dữ liệu liên quan đến tên miền từ nhiều nguồn khác nhau.                             |
| **Online DNS Lookup Services** | Giao diện thân thiện người dùng để thực hiện tra cứu DNS trực tuyến.                                 | Tra cứu DNS nhanh chóng, kiểm tra tên miền, tra cứu khi không có công cụ dòng lệnh.                                         |


The Domain Information Groper
The dig command (Domain Information Groper) is a versatile and powerful utility for querying DNS servers and retrieving various types of DNS records. Its flexibility and detailed and customizable output make it a go-to choice.

Common dig Commands
| **Command**                     | **Description**                                                                                                      |
| ------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
| `dig domain.com`                | Thực hiện truy vấn mặc định để lấy bản ghi **A** (địa chỉ IPv4) của tên miền.                                        |
| `dig domain.com A`              | Lấy **địa chỉ IPv4 (A record)** liên kết với tên miền.                                                               |
| `dig domain.com AAAA`           | Lấy **địa chỉ IPv6 (AAAA record)** của tên miền.                                                                     |
| `dig domain.com MX`             | Tìm các **máy chủ mail (MX records)** của tên miền.                                                                  |
| `dig domain.com NS`             | Xác định **các máy chủ tên miền (Name Servers)** có thẩm quyền cho domain.                                           |
| `dig domain.com TXT`            | Lấy các **bản ghi TXT**, thường chứa thông tin xác minh hoặc chính sách SPF/DKIM.                                    |
| `dig domain.com CNAME`          | Lấy **bản ghi CNAME** (tên miền bí danh) của domain.                                                                 |
| `dig domain.com SOA`            | Lấy **bản ghi SOA (Start of Authority)** – thông tin quản trị của vùng DNS.                                          |
| `dig @1.1.1.1 domain.com`       | Chỉ định **máy chủ DNS cụ thể** để truy vấn (ở đây là Cloudflare `1.1.1.1`).                                         |
| `dig +trace domain.com`         | Hiển thị **toàn bộ quá trình phân giải DNS**, từ Root → TLD → Authoritative.                                         |
| `dig -x 192.168.1.1`            | Thực hiện **tra cứu ngược (reverse lookup)** để tìm tên miền từ địa chỉ IP.                                          |
| `dig +short domain.com`         | Hiển thị **kết quả ngắn gọn**, chỉ gồm phần trả lời chính.                                                           |
| `dig +noall +answer domain.com` | Chỉ hiển thị **phần “answer section”** của kết quả.                                                                  |
| `dig domain.com ANY`            | Lấy **tất cả các bản ghi DNS** có sẵn cho domain *(lưu ý: nhiều DNS server hiện bỏ qua truy vấn ANY theo RFC 8482)*. |

Caution: Some servers can detect and block excessive DNS queries. Use caution and respect rate limits. Always obtain permission before performing extensive DNS reconnaissance on a target.

Groping DNS
  naruto3co@htb[/htb]$ dig google.com
      ; <<>> DiG 9.18.24-0ubuntu0.22.04.1-Ubuntu <<>> google.com
      ;; global options: +cmd
      ;; Got answer:
      ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 16449
      ;; flags: qr rd ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
      ;; WARNING: recursion requested but not available
      
      ;; QUESTION SECTION:
      ;google.com.                    IN      A
      
      ;; ANSWER SECTION:
      google.com.             0       IN      A       142.251.47.142
      
      ;; Query time: 0 msec
      ;; SERVER: 172.23.176.1#53(172.23.176.1) (UDP)
      ;; WHEN: Thu Jun 13 10:45:58 SAST 2024
      ;; MSG SIZE  rcvd: 54


This output is the result of a DNS query using the dig command for the domain google.com. The command was executed on a system running DiG version 9.18.24-0ubuntu0.22.04.1-Ubuntu. The output can be broken down into four key sections:
  Header
    ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 16449: This line indicates the type of query (QUERY), the successful status (NOERROR), and a unique identifier (16449) for this specific query.
      ;; flags: qr rd ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0: This describes the flags in the DNS header:
      qr: Query Response flag - indicates this is a response.
      rd: Recursion Desired flag - means recursion was requested.
      ad: Authentic Data flag - means the resolver considers the data authentic.
      The remaining numbers indicate the number of entries in each section of the DNS response: 1 question, 1 answer, 0 authority records, and 0 additional records.
    ;; WARNING: recursion requested but not available: This indicates that recursion was requested, but the server does not support it.
  

Question Section
  ;google.com. IN A: This line specifies the question: "What is the IPv4 address (A record) for google.com?"
Answer Section
  google.com. 0 IN A 142.251.47.142: This is the answer to the query. It indicates that the IP address associated with google.com is 142.251.47.142. The '0' represents the TTL (time-to-live), indicating how long the result can be cached before being refreshed.
Footer
  ;; Query time: 0 msec: This shows the time it took for the query to be processed and the response to be received (0 milliseconds).
  ;; SERVER: 172.23.176.1#53(172.23.176.1) (UDP): This identifies the DNS server that provided the answer and the protocol used (UDP).
  ;; WHEN: Thu Jun 13 10:45:58 SAST 2024: This is the timestamp of when the query was made.
  ;; MSG SIZE rcvd: 54: This indicates the size of the DNS message received (54 bytes).

An opt pseudosection can sometimes exist in a dig query. This is due to Extension Mechanisms for DNS (EDNS), which allows for additional features such as larger message sizes and DNS Security Extensions (DNSSEC) support.
If you just want the answer to the question, without any of the other information, you can query dig using +short:
    naruto3co@htb[/htb]$ dig +short hackthebox.com


====================================================================== Subdomains ======================================================================
====================================================================== Subdomains ======================================================================
====================================================================== Subdomains ======================================================================

Subdomain là phần mở rộng của domain chính, được dùng để phân chia các chức năng hoặc khu vực của một website (ví dụ: blog.example.com, shop.example.com, mail.example.com).
Tầm quan trọng trong web reconnaissance:
  Môi trường phát triển / thử nghiệm (staging): thường có bảo mật lỏng lẻo, có thể chứa lỗ hổng hoặc thông tin nhạy cảm.
  Cổng đăng nhập ẩn: có thể chứa các trang quản trị hoặc login không được công khai, là mục tiêu tiềm năng cho kẻ tấn công.
  Ứng dụng cũ (legacy): có thể vẫn hoạt động trên subdomain và chứa phần mềm lỗi thời dễ bị khai thác.
  Thông tin nhạy cảm: subdomain đôi khi tiết lộ dữ liệu nội bộ, tài liệu, hoặc file cấu hình quan trọng.

Định nghĩa ngắn: Subdomain enumeration là quá trình tìm và liệt kê các miền phụ (subdomains) của một domain chính — thường thể hiện qua bản ghi DNS A/AAAA (trỏ tới IP) hoặc CNAME (bí danh).
Loại bản ghi liên quan:
	A / AAAA: ánh xạ subdomain → địa chỉ IP.
	CNAME: alias trỏ tới domain/subdomain khác.
	PTR, TXT, SRV (ít phổ biến hơn) cũng có thể cung cấp thông tin bổ sung.
Hai phương pháp chính:
	Active (chủ động):
		Tương tác trực tiếp với DNS server của mục tiêu.
		Kỹ thuật: thử DNS zone transfer (AXFR) nếu server cấu hình sai; brute-force tên miền phụ bằng wordlists.
		Công cụ mẫu: dnsenum, gobuster, ffuf, massdns, subfinder (kết hợp active checks).
		Ưu/nhược: có khả năng đầy đủ hơn nhưng dễ bị phát hiện (log, IDS).
	Passive (thụ động):
		Sử dụng nguồn dữ liệu công khai, không truy vấn trực tiếp DNS mục tiêu.
		Nguồn: Certificate Transparency (CT) logs (SAN trong certs), search engines (site:), dịch vụ tập hợp DNS (VirusTotal, SecurityTrails, Shodan, Censys...), lịch sử WHOIS, repo công khai.
		Ưu/nhược: thầm lặng, an toàn về mặt phát hiện, nhưng có thể không đầy đủ / lỗi thời.
Lời khuyên chiến lược:
	Kết hợp passive → mở rộng bằng active để vừa giữ stealth vừa tối đa hóa độ bao phủ.
	Dùng wordlists tùy chỉnh (theo nghiệp vụ/tiền tố nội bộ) để tăng hiệu quả brute-force.
	Lưu lại kết quả, theo dõi thay đổi (subdomain takeover, expired DNS records).
Rủi ro/giá trị:
	hiện staging/dev, login/adm portals, ứng dụng cũ, hoặc tài liệu nhạy cảm trên subdomains — tất cả đều có giá trị cho reconnaissance hoặc để vá lỗ hổng.

dnsenum — Công cụ toàn diện, hỗ trợ dictionary + brute-force.
  Khi dùng: muốn một tool “all-in-one” dễ chạy nhanh cho reconnaissance cơ bản.
  Lệnh mẫu: dnsenum --enum --threads 10 example.com

fierce — Dễ dùng, tốt cho dò đệ quy và phát hiện wildcard DNS.
  Khi dùng: muốn phát hiện cấu trúc subdomain theo kiểu đệ quy/kế thừa nhanh.
  Lệnh mẫu: fierce -dns example.com

dnsrecon — Linh hoạt, kết hợp nhiều kỹ thuật (brute, zone transfer, reverse) và xuất được nhiều định dạng.
  Khi dùng: khi cần báo cáo có cấu trúc (CSV/JSON) hoặc muốn mix nhiều kỹ thuật trong 1 tool.
  Lệnh mẫu: dnsrecon -d example.com -a (all tests)

amass — Duy trì tích cực, mạnh về mức độ thu thập (passive + active) và có tích hợp nhiều nguồn/wordlists.
  Khi dùng: khi cần coverage cao, kết hợp CT logs, API, brute, graph mapping.
  Lệnh mẫu: amass enum -d example.com -o amass.txt

assetfinder — Nhẹ, nhanh, hiệu quả cho bước thu thập nhanh từ nhiều nguồn công khai.
  Khi dùng: lúc bắt đầu reconnaissance, muốn nhanh có danh sách ban đầu.
  Lệnh mẫu: assetfinder --subs-only example.com

puredns — Rất tốt cho brute-force + resolving hàng loạt (tốc độ cao), phù hợp khi bạn đã có wordlist lớn.
  Khi dùng: khi chạy brute-force scale lớn, kết hợp với massresolver hoặc custom resolver.
  Lệnh mẫu: puredns bruteforce wordlist.txt example.com --r 8.8.8.8 | puredns resolve -w results.txt

Gợi ý chiến lược kết hợp (ngắn)
    Passive first: assetfinder → amass (passive) → CT logs → dedupe.
    Tối ưu wordlist: tổng hợp từ kết quả passive → thêm targeted words.
    Brute/resolution: dùng puredns (hoặc massdns) trên wordlist đã tinh chỉnh.
    Xác thực & mapping: amass + dnsrecon để kiểm tra kỹ, xuất JSON/CSV cho báo cáo.
    Wildcard check: luôn test wildcard DNS trước (ví dụ với một tên ngẫu nhiên) để loại false-positive.

https://github.com/danielmiessler/SecLists




====================================================================== DNS Zone Transfers ======================================================================
====================================================================== DNS Zone Transfers ======================================================================
====================================================================== DNS Zone Transfers ======================================================================



While brute-forcing can be a fruitful approach, there's a less invasive and potentially more efficient method for uncovering subdomains – DNS zone transfers. This mechanism, designed for replicating DNS records between name servers, can inadvertently become a goldmine of information for prying eyes if misconfigured.
What is a Zone Transfer
A DNS zone transfer is essentially a wholesale copy of all DNS records within a zone (a domain and its subdomains) from one name server to another. This process is essential for maintaining consistency and redundancy across DNS servers. However, if not adequately secured, unauthorised parties can download the entire zone file, revealing a complete list of subdomains, their associated IP addresses, and other sensitive DNS data.


+--------------------+                          +--------------------+
| secondaryServer    |                          | primaryServer      |
+--------------------+                          +--------------------+
       |                                            |
       |  ---------------- AXFR Request ---------->|
       |                                            |
       |  <--------------- SOA Record --------------|
       |                                            |
       |  <---+                                    |
       |      |  [ transfer ]                       |
       |      |  +---------------------------------+
       |      |  | DNS Record: example.inlane ...  |
       |      |  | DNS Record: www.inlane ...      |
       |      |  | DNS Record: mail.inlane ...     |
       |      |  | ... (loop / many records)       |
       |      |  +---------------------------------+
       |  <---+                                    |
       |                                            |
       |  <---------- Zone Transfer Complete ------|
       |                                            |
       |  ------------------- ACK ---------------->|
       |                                            |
+--------------------+                          +--------------------+
| secondaryServer    |                          | primaryServer      |
+--------------------+                          +--------------------+

Zone Transfer Request (AXFR): The secondary DNS server initiates the process by sending a zone transfer request to the primary server. This request typically uses the AXFR (Full Zone Transfer) type.
SOA Record Transfer: Upon receiving the request (and potentially authenticating the secondary server), the primary server responds by sending its Start of Authority (SOA) record. The SOA record contains vital information about the zone, including its serial number, which helps the secondary server determine if its zone data is current.
DNS Records Transmission: The primary server then transfers all the DNS records in the zone to the secondary server, one by one. This includes records like A, AAAA, MX, CNAME, NS, and others that define the domain's subdomains, mail servers, name servers, and other configurations.
Zone Transfer Complete: Once all records have been transmitted, the primary server signals the end of the zone transfer. This notification informs the secondary server that it has received a complete copy of the zone data.
Acknowledgement (ACK): The secondary server sends an acknowledgement message to the primary server, confirming the successful receipt and processing of the zone data. This completes the zone transfer process.


The Zone Transfer Vulnerability
	While zone transfers are essential for legitimate DNS management, a misconfigured DNS server can transform this process into a significant security vulnerability. The core issue lies in the access controls governing who can initiate a zone transfer.
	In the early days of the internet, allowing any client to request a zone transfer from a DNS server was common practice. This open approach simplified administration but opened a gaping security hole. It meant that anyone, including malicious actors, could ask a DNS server for a complete copy of its zone file, which contains a wealth of sensitive information.
	The information gleaned from an unauthorised zone transfer can be invaluable to an attacker. It reveals a comprehensive map of the target's DNS infrastructure, including:
	Subdomains: A complete list of subdomains, many of which might not be linked from the main website or easily discoverable through other means. These hidden subdomains could host development servers, staging environments, administrative panels, or other sensitive resources.
	IP Addresses: The IP addresses associated with each subdomain, providing potential targets for further reconnaissance or attacks.
	Name Server Records: Details about the authoritative name servers for the domain, revealing the hosting provider and potential misconfigurations.

Remediation
	Fortunately, awareness of this vulnerability has grown, and most DNS server administrators have mitigated the risk. Modern DNS servers are typically configured to allow zone transfers only to trusted secondary servers, ensuring that sensitive zone data remains confidential.
	However, misconfigurations can still occur due to human error or outdated practices. This is why attempting a zone transfer (with proper authorisation) remains a valuable reconnaissance technique. Even if unsuccessful, the attempt can reveal information about the DNS server's configuration and security posture.

Exploiting Zone Transfers
	You can use the dig command to request a zone transfer:
		naruto3co@htb[/htb]$ dig axfr @nsztm1.digi.ninja zonetransfer.me

This command instructs dig to request a full zone transfer (axfr) from the DNS server responsible for zonetransfer.me. If the server is misconfigured and allows the transfer, you'll receive a complete list of DNS records for the domain, including all subdomains.
		naruto3co@htb[/htb]$ dig axfr @nsztm1.digi.ninja zonetransfer.me
		
				; <<>> DiG 9.18.12-1~bpo11+1-Debian <<>> axfr @nsztm1.digi.ninja zonetransfer.me
				; (1 server found)
				;; global options: +cmd
				zonetransfer.me.	7200	IN	SOA	nsztm1.digi.ninja. robin.digi.ninja. 2019100801 172800 900 1209600 3600
				zonetransfer.me.	300	IN	HINFO	"Casio fx-700G" "Windows XP"
				zonetransfer.me.	301	IN	TXT	"google-site-verification=tyP28J7JAUHA9fw2sHXMgcCC0I6XBmmoVi04VlMewxA"
				zonetransfer.me.	7200	IN	MX	0 ASPMX.L.GOOGLE.COM.
				...
				zonetransfer.me.	7200	IN	A	5.196.105.14
				zonetransfer.me.	7200	IN	NS	nsztm1.digi.ninja.
				zonetransfer.me.	7200	IN	NS	nsztm2.digi.ninja.
				_acme-challenge.zonetransfer.me. 301 IN	TXT	"6Oa05hbUJ9xSsvYy7pApQvwCUSSGgxvrbdizjePEsZI"
				_sip._tcp.zonetransfer.me. 14000 IN	SRV	0 0 5060 www.zonetransfer.me.
				14.105.196.5.IN-ADDR.ARPA.zonetransfer.me. 7200	IN PTR www.zonetransfer.me.
				asfdbauthdns.zonetransfer.me. 7900 IN	AFSDB	1 asfdbbox.zonetransfer.me.
				asfdbbox.zonetransfer.me. 7200	IN	A	127.0.0.1
				asfdbvolume.zonetransfer.me. 7800 IN	AFSDB	1 asfdbbox.zonetransfer.me.
				canberra-office.zonetransfer.me. 7200 IN A	202.14.81.230
				...
				;; Query time: 10 msec
				;; SERVER: 81.4.108.41#53(nsztm1.digi.ninja) (TCP)
				;; WHEN: Mon May 27 18:31:35 BST 2024
				;; XFR size: 50 records (messages 1, bytes 2085)


====================================================================== Virtual Hosts ======================================================================
====================================================================== Virtual Hosts ======================================================================
====================================================================== Virtual Hosts ======================================================================

Once the DNS directs traffic to the correct server, the web server configuration becomes crucial in determining how the incoming requests are handled. Web servers like Apache, Nginx, or IIS are designed to host multiple websites or applications on a single server. They achieve this through virtual hosting, which allows them to differentiate between domains, subdomains, or even separate websites with distinct content.

How Virtual Hosts Work: Understanding VHosts and Subdomains
At the core of virtual hosting is the ability of web servers to distinguish between multiple websites or applications sharing the same IP address. This is achieved by leveraging the HTTP Host header, a piece of information included in every HTTP request sent by a web browser.

The key difference between VHosts and subdomains is their relationship to the Domain Name System (DNS) and the web server's configuration.
	Subdomains: These are extensions of a main domain name (e.g., blog.example.com is a subdomain of example.com). Subdomains typically have their own DNS records, pointing to either the same IP address as the main domain or a different one. They can be used to organise different sections or services of a website.
	Virtual Hosts (VHosts): Virtual hosts are configurations within a web server that allow multiple websites or applications to be hosted on a single server. They can be associated with top-level domains (e.g., example.com) or subdomains (e.g., dev.example.com). Each virtual host can have its own separate configuration, enabling precise control over how requests are handled.

Subdomain (tên miền con) → là phần mở rộng của tên miền chính.
→ Quản lý ở DNS.
→ Ví dụ: blog.example.com hoặc shop.example.com.
→ Mỗi subdomain có thể trỏ tới cùng hoặc khác IP so với domain chính.

Virtual Host (VHost) → là cấu hình trong web server (Apache/Nginx) để phân biệt nhiều website chạy trên một máy chủ duy nhất.
→ Quản lý ở mức web server, không phải DNS.
→ Ví dụ: cùng một server có thể host cả example.com và shop.example.com qua 2 file cấu hình VHost riêng.

Ví dụ tổng hợp:
blog.example.com → là subdomain (được khai báo trong DNS).
Web server có file cấu hình:
	server {
	    server_name blog.example.com;
	    root /var/www/blog;
	}
→ đây là Virtual Host xử lý cho subdomain đó.
👉 Tóm lại:
	Subdomain: thuộc về DNS.
	VHost: thuộc về cấu hình web server.

If a virtual host does not have a DNS record, you can still access it by modifying the hosts file on your local machine. The hosts file allows you to map a domain name to an IP address manually, bypassing DNS resolution.
Websites often have subdomains that are not public and won't appear in DNS records. These subdomains are only accessible internally or through specific configurations. VHost fuzzing is a technique to discover public and non-public subdomains and VHosts by testing various hostnames against a known IP address.
Virtual hosts can also be configured to use different domains, not just subdomains. For example:
# Example of name-based virtual host configuration in Apache
	<VirtualHost *:80>
	    ServerName www.example1.com
	    DocumentRoot /var/www/example1
	</VirtualHost>
	<VirtualHost *:80>
	    ServerName www.example2.org
	    DocumentRoot /var/www/example2
	</VirtualHost>
	<VirtualHost *:80>
	    ServerName www.another-example.net
	    DocumentRoot /var/www/another-example
	</VirtualHost>

Here, example1.com, example2.org, and another-example.net are distinct domains hosted on the same server. The web server uses the Host header to serve the appropriate content based on the requested domain name.

Browser                         WebServer                    VirtualHostConfig                 DocumentRoot
   |                                 |                                |                               |
   |-- HTTP Request (www.inlanefreight.com) -->                       |                               |
   |                                 |                                |                               |
   |                                 |-- Examine Host Header -------->|                               |
   |                                 |<-- Finding Matching Config ----|                               |
   |                                 |                                |                               |
   |                                 |--------> Return Document Root -------------------------------> |
   |                                 |<-------------------------------- Retrieve Files and Resources -|
   |                                 |                                |                               |
   |<---------------------------- HTTP Response -----------------------|                               |
   |-- Display Content ------------->|                                |                               |
   |                                 |                                |                               |

Browser Requests a Website: When you enter a domain name (e.g., www.inlanefreight.com) into your browser, it initiates an HTTP request to the web server associated with that domain's IP address.
Host Header Reveals the Domain: The browser includes the domain name in the request's Host header, which acts as a label to inform the web server which website is being requested.
Web Server Determines the Virtual Host: The web server receives the request, examines the Host header, and consults its virtual host configuration to find a matching entry for the requested domain name.
Serving the Right Content: Upon identifying the correct virtual host configuration, the web server retrieves the corresponding files and resources associated with that website from its document root and sends them back to the browser as the HTTP response.

In essence, the Host header functions as a switch, enabling the web server to dynamically determine which website to serve based on the domain name requested by the browser.

Types of Virtual Hosting
There are three primary types of virtual hosting, each with its advantages and drawbacks:
	Name-Based Virtual Hosting: This method relies solely on the HTTP Host header to distinguish between websites. It is the most common and flexible method, as it doesn't require multiple IP addresses. It’s cost-effective, easy to set up, and supports most modern web servers. However, it requires the web server to support name-based virtual hosting and can have limitations with certain protocols like SSL/TLS.
	IP-Based Virtual Hosting: This type of hosting assigns a unique IP address to each website hosted on the server. The server determines which website to serve based on the IP address to which the request was sent. It doesn't rely on the Host header, can be used with any protocol, and offers better isolation between websites. Still, it requires multiple IP addresses, which can be expensive and less scalable.
	Port-Based Virtual Hosting: Different websites are associated with different ports on the same IP address. For example, one website might be accessible on port 80, while another is on port 8080. Port-based virtual hosting can be used when IP addresses are limited, but it’s not as common or user-friendly as name-based virtual hosting and might require users to specify the port number in the URL.

| Loại Virtual Hosting | Cách hoạt động                                                | Ưu điểm                                          | Nhược điểm                                         | Ví dụ                                                   |
| -------------------- | ------------------------------------------------------------- | ------------------------------------------------ | -------------------------------------------------- | ------------------------------------------------------- |
| **Name-Based**       | Phân biệt website dựa vào **Host header** trong HTTP request. | Tiết kiệm IP, dễ cấu hình, phổ biến nhất.        | Có thể gặp vấn đề với **SSL/TLS** (nếu server cũ). | `example.com` và `shop.example.com` cùng IP.            |
| **IP-Based**         | Mỗi website có **địa chỉ IP riêng**.                          | Cách ly tốt, dùng được mọi giao thức (SSL/TLS…). | Tốn nhiều IP, khó mở rộng, chi phí cao.            | `example.com` → 192.168.1.10, `shop.com` → 192.168.1.11 |
| **Port-Based**       | Các website dùng **cổng khác nhau** trên cùng IP.             | Không cần nhiều IP, dùng khi thiếu địa chỉ IP.   | Không thân thiện (phải gõ port), ít phổ biến.      | `example.com:80`, `example.com:8080`                    |
👉 Tóm lại:
	Thường dùng nhất là Name-Based (hiện đại, linh hoạt).
	IP-Based dùng cho môi trường cần tách biệt cao hoặc SSL riêng biệt.
	Port-Based chỉ dùng khi thực sự cần.


Virtual Host Discovery Tools
While manual analysis of HTTP headers and reverse DNS lookups can be effective, specialised virtual host discovery tools automate and streamline the process, making it more efficient and comprehensive. These tools employ various techniques to probe the target server and uncover potential virtual hosts.
| Tool            | Mô tả                                                                                                        | Tính năng                                                           |
| --------------- | ------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------- |
| **gobuster**    | Công cụ đa năng thường dùng để brute-force thư mục/tệp, đồng thời hiệu quả cho việc phát hiện virtual hosts. | Nhanh; hỗ trợ nhiều phương thức HTTP; dùng được wordlist tùy chỉnh. |
| **Feroxbuster** | Tương tự Gobuster nhưng viết bằng Rust, nổi bật về tốc độ và độ linh hoạt.                                   | Hỗ trợ đệ quy; phát hiện wildcard; nhiều bộ lọc; hiệu năng cao.     |
| **ffuf**        | Trình web fuzzer nhanh, có thể dùng để phát hiện virtual hosts bằng cách fuzz `Host` header.                 | Nhập wordlist tùy chỉnh; nhiều tùy chọn lọc và xử lý kết quả.       |

	naruto3co@htb[/htb]$ gobuster vhost -u http://<target_IP_address> -w <wordlist_file> --append-domain
	naruto3co@htb[/htb]$ gobuster vhost -u http://inlanefreight.htb:81 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --append-domain

Remember: to brute-force vhosts, you'll need to fuzz the host header, NOT the hostname. I'm partial to using ffuf for vhost fuzzing myself. You just run it against your wordlist of choice and add the -H 'Host: FUZZ.inlanefreight.htb' flag. Good luck and happy hunting!

-> bài lab câu 1 
Câu 1
	ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt \
     -u http://94.237.48.12:34589/ \
     -H "Host: FUZZ.inlanefreight.htb" \
     -t 50 \
     -mc 200 \
     -o ffuf_vhosts.json -of json

		-> web17611.inlanefreight.htb
Câu 2 : vm5.inlanefreight.htb


====================================================================== Certificate Transparency Logs ======================================================================
====================================================================== Certificate Transparency Logs ======================================================================
====================================================================== Certificate Transparency Logs ======================================================================

CT là sổ cái ghi chứng chỉ 

In the sprawling mass of the internet, trust is a fragile commodity. One of the cornerstones of this trust is the Secure Sockets Layer/Transport Layer Security (SSL/TLS) protocol, which encrypts communication between your browser and a website. At the heart of SSL/TLS lies the digital certificate, a small file that verifies a website's identity and allows for secure, encrypted communication.
However, the process of issuing and managing these certificates isn't foolproof. Attackers can exploit rogue or mis-issued certificates to impersonate legitimate websites, intercept sensitive data, or spread malware. This is where Certificate Transparency (CT) logs come into play.

What are Certificate Transparency Logs?
Certificate Transparency (CT) logs are public, append-only ledgers that record the issuance of SSL/TLS certificates. Whenever a Certificate Authority (CA) issues a new certificate, it must submit it to multiple CT logs. Independent organisations maintain these logs and are open for anyone to inspect.
Think of CT logs as a global registry of certificates. They provide a transparent and verifiable record of every SSL/TLS certificate issued for a website. This transparency serves several crucial purposes:
	Early Detection of Rogue Certificates: By monitoring CT logs, security researchers and website owners can quickly identify suspicious or misissued certificates. A rogue certificate is an unauthorized or fraudulent digital certificate issued by a trusted certificate authority. Detecting these early allows for swift action to revoke the certificates before they can be used for malicious purposes.
	Accountability for Certificate Authorities: CT logs hold CAs accountable for their issuance practices. If a CA issues a certificate that violates the rules or standards, it will be publicly visible in the logs, leading to potential sanctions or loss of trust.
	Strengthening the Web PKI (Public Key Infrastructure): The Web PKI is the trust system underpinning secure online communication. CT logs help to enhance the security and integrity of the Web PKI by providing a mechanism for public oversight and verification of certificates.

How Certificate Transparency Logs Work
Certificate Transparency logs rely on a clever combination of cryptographic techniques and public accountability:
	Certificate Issuance: When a website owner requests an SSL/TLS certificate from a Certificate Authority (CA), the CA performs due diligence to verify the owner's identity and domain ownership. Once verified, the CA issues a pre-certificate, a preliminary certificate version.
	Log Submission: The CA then submits this pre-certificate to multiple CT logs. Each log is operated by a different organisation, ensuring redundancy and decentralisation. The logs are essentially append-only, meaning that once a certificate is added, it cannot be modified or deleted, ensuring the integrity of the historical record.
	Signed Certificate Timestamp (SCT): Upon receiving the pre-certificate, each CT log generates a Signed Certificate Timestamp (SCT). This SCT is a cryptographic proof that the certificate was submitted to the log at a specific time. The SCT is then included in the final certificate issued to the website owner.
	Browser Verification: When a user's browser connects to a website, it checks the certificate's SCTs. These SCTs are verified against the public CT logs to confirm that the certificate was issued and logged correctly. If the SCTs are valid, the browser establishes a secure connection; if not, it may display a warning to the user.
	Monitoring and Auditing: CT logs are continuously monitored by various entities, including security researchers, website owners, and browser vendors. These monitors look for anomalies or suspicious certificates, such as those issued for domains they don't own or certificates violating industry standards. If any issues are found, they can be reported to the relevant CA for investigation and potential revocation of the certificate.

Cấp phát chứng chỉ: CA xác minh danh tính và quyền sở hữu miền, sau đó tạo pre-certificate.
Gửi log: CA gửi pre-certificate lên nhiều Certificate Transparency (CT) logs, là hệ thống chỉ ghi thêm, đảm bảo tính toàn vẹn.
SCT (Signed Certificate Timestamp): CT log trả về SCT – bằng chứng mã hóa cho thấy chứng chỉ đã được ghi nhận. SCT này được gắn vào chứng chỉ cuối cùng.
Trình duyệt kiểm tra: Khi người dùng truy cập website, trình duyệt xác minh SCT trong chứng chỉ với các CT logs công khai; nếu hợp lệ thì kết nối an toàn.
Giám sát & kiểm toán: Nhiều bên (CA, nhà nghiên cứu, trình duyệt, chủ website) theo dõi CT logs để phát hiện chứng chỉ sai phạm và yêu cầu thu hồi nếu cần.

The Merkle Tree Structure
To ensure CT logs' integrity and tamper-proof nature, they employ a Merkle tree cryptographic structure. This structure organises the certificates in a tree-like fashion, where each leaf node represents a certificate, and each non-leaf node represents a hash of its child nodes. The root of the tree, known as the Merkle root, is a single hash representing the entire log.
	Let's visualise this with a hypothetical Merkle tree for inlanefreight.com:

                    ┌───────────────────────────────┐
                    │ Root Hash                    │
                    │ (Hash of All Below)          │
                    └──────────────┬────────────────┘
                                   │
            ┌──────────────────────┴──────────────────────┐
            │                                             │
 ┌───────────────────────┐                    ┌───────────────────────┐
 │ Hash 1                │                    │ Hash 2                │
 │ (Hash of Cert 1 & 2)  │                    │ (Hash of Cert 3 & 4)  │
 └────────────┬──────────┘                    └────────────┬──────────┘
              │                                            │
     ┌────────┴────────┐                          ┌────────┴────────┐
     │                 │                          │                 │
┌──────────────┐  ┌──────────────┐          ┌──────────────┐  ┌──────────────┐
│ Cert 1       │  │ Cert 2       │          │ Cert 3       │  │ Cert 4       │
│ inlanefreight│  │ blog.inlane  │          │ dev.inlane   │  │ api.inlane   │
│ .com         │  │ freight.com  │          │ freight.com  │  │ freight.com  │
└──────────────┘  └──────────────┘          └──────────────┘  └──────────────┘

Root Hash:
	Root Hash: Nút gốc đại diện cho toàn bộ trạng thái log (hash tổng của tất cả chứng chỉ).
	Hash 1 & Hash 2: Nút trung gian — mỗi cái là hash của hai nút con (các chứng chỉ hoặc hash khác).
	Cert 1 – Cert 4: Nút lá — đại diện cho các chứng chỉ SSL/TLS của các subdomain (inlanefreight.com, blog, dev, api).
Cách xác minh một chứng chỉ (ví dụ Cert 2 – blog.inlanefreight.com):
	Dùng hash của Cert 2 để xác minh chứng chỉ gốc.
	Kết hợp với Hash 1 để chứng minh rằng Cert 2 thuộc cặp với Cert 1.
	Dùng Root Hash để xác nhận rằng Hash 1 là một phần hợp lệ của toàn bộ log.

CT Logs and Web Recon
Nguồn thông tin xác thực, không đoán mò: CT logs chứa bản ghi thực tế của các chứng chỉ đã cấp cho domain và subdomain, nên không phụ thuộc vào wordlist hay brute-force.
Toàn diện và lịch sử: Hiển thị cả subdomain cũ/không hoạt động hoặc đã hết hạn chứng chỉ — những mục này có thể hé lộ cấu hình/phiên bản phần mềm lỗi thời.
Hiệu quả: Tìm được nhiều subdomain mà brute-force có thể bỏ sót (những tên khó đoán hoặc không trong từ điển).
Rủi ro hữu ích cho pentest: Subdomain từ CT có thể là điểm dễ tấn công do cấu hình cũ/thiếu vá.
Kết luận: CT logs là công cụ nhanh, tin cậy và bổ sung rất mạnh cho thu thập thông tin (recon) so với phương pháp đoán tên truyền thống.

Searching CT Logs
There are two popular options for searching CT logs:
| **Tool**   | **Key Features**                                                                                                     | **Use Cases**                                                                                             | **Pros**                                                    | **Cons**                                     |
| ---------- | -------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------- | -------------------------------------------- |
| **crt.sh** | User-friendly web interface, simple domain search, displays certificate details and SAN entries.                     | Quick and easy searches, identifying subdomains, checking certificate issuance history.                   | Free, easy to use, no registration required.                | Limited filtering and analysis options.      |
| **Censys** | Powerful search engine for internet-connected devices, advanced filtering by domain, IP, and certificate attributes. | In-depth analysis of certificates, identifying misconfigurations, finding related certificates and hosts. | Extensive data and filtering options, API access available. | Requires registration (free tier available). |


crt.sh lookup
While crt.sh offers a convenient web interface, you can also leverage its API for automated searches directly from your terminal. Let's see how to find all 'dev' subdomains on facebook.com using curl and jq:

naruto3co@htb[/htb]$ curl -s "https://crt.sh/?q=facebook.com&output=json" | jq -r '.[] | select(.name_value | contains("dev")) | .name_value' | sort -u
	*.dev.facebook.com
	*.newdev.facebook.com
	*.secure.dev.facebook.com
	dev.facebook.com
	devvm1958.ftw3.facebook.com
	facebook-amex-dev.facebook.com
	facebook-amex-sign-enc-dev.facebook.com
	newdev.facebook.com
	secure.dev.facebook.com

		curl -s "https://crt.sh/?q=facebook.com&output=json": This command fetches the JSON output from crt.sh for certificates matching the domain facebook.com.
		jq -r '.[] | select(.name_value | contains("dev")) | .name_value': This part filters the JSON results, selecting only entries where the name_value field (which contains the domain or subdomain) includes the string "dev". The -r flag tells jq to output raw strings.
		sort -u: This sorts the results alphabetically and removes duplicates.













